package at.fhtw.swen3.services.mapper;

import at.fhtw.swen3.services.dto.HopArrival;
import at.fhtw.swen3.persistence.entities.HopArrivalEntity;
import at.fhtw.swen3.persistence.entities.ParcelEntity;
import at.fhtw.swen3.persistence.entities.RecipientEntity;
import at.fhtw.swen3.services.dto.NewParcelInfo;
import at.fhtw.swen3.services.dto.Parcel;
import at.fhtw.swen3.services.dto.TrackingInformation;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

class ParcelMapperTest {

    ParcelMapperImpl parcelMapper = new ParcelMapperImpl();
    private @Mock HopArrivalEntity hopArrival;
    private final List<HopArrivalEntity> visitedHops = Arrays.asList(hopArrival, hopArrival, hopArrival);
    private final List<HopArrivalEntity> futuredHops = Arrays.asList(hopArrival, hopArrival, hopArrival);

    //for Test "toTrackingInfoDto", because visitedHops and futureHops are List of HopArrivals after mapping (not List of HopArrivalEntity)
    private @Mock HopArrival hopArrivalafterMapping;
    private final List<HopArrival> hopArrivals = Arrays.asList(hopArrivalafterMapping, hopArrivalafterMapping, hopArrivalafterMapping);

    protected void setUp() throws Exception {
    }

    @Test
    void from() {

        Parcel parcel = Parcel.builder()
                .weight(0.3f)
                .build();
        NewParcelInfo newParcelInfo = NewParcelInfo.builder()
                .trackingId("PYJRB4HZ6")
                .build();
        TrackingInformation trackingInformation = TrackingInformation.builder()
                .state(TrackingInformation.StateEnum.DELIVERED)
                .build();

        ParcelEntity mappedEntity = parcelMapper.from(parcel, newParcelInfo, trackingInformation);
        assertEquals(mappedEntity.getWeight(), parcel.getWeight());
        assertEquals(mappedEntity.getTrackingId(), newParcelInfo.getTrackingId());
        assertEquals(mappedEntity.getDeliveryStatus(), trackingInformation.getState());
    }

    @Test
    void toParcelDto() {
        ParcelEntity parcelEntity = ParcelEntity.builder()
                .weight(0.6f)
                .recipient(RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
                .sender(RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
                .trackingId("PYJRB4HZ6")
                .deliveryStatus(TrackingInformation.StateEnum.INTRANSPORT)
                .visitedHops(visitedHops)
                .futureHops(futuredHops)
                .build();

        //DTO generated by ParcelMapper
        Parcel mappedParcel = parcelMapper.toParcelDto(parcelEntity);

        assertEquals(mappedParcel.getWeight(), parcelEntity.getWeight());
        assertEquals(mappedParcel.getRecipient().getCity(), parcelEntity.getRecipient().getCity());
        assertEquals(mappedParcel.getSender().getStreet(), parcelEntity.getSender().getStreet());
    }

    @Test
    void toParcelInfoDto() {
        ParcelEntity parcelEntity = ParcelEntity.builder()
                .weight(0.6f)
                .recipient(RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
                .sender(RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
                .trackingId("PYJRB4HZ6")
                .deliveryStatus(TrackingInformation.StateEnum.INTRANSPORT)
                .visitedHops(visitedHops)
                .futureHops(futuredHops)
                .build();

        //DTO generated by ParcelMapper
        NewParcelInfo mappedParcelInfoDto = parcelMapper.toParcelInfoDto(parcelEntity);

        assertEquals(mappedParcelInfoDto.getTrackingId(), parcelEntity.getTrackingId());
    }

    @Test
    void toTrackingInfoDto() {
        ParcelEntity parcelEntity = ParcelEntity.builder()
                .weight(0.6f)
                .recipient(RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
                .sender(RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
                .trackingId("PYJRB4HZ6")
                .deliveryStatus(TrackingInformation.StateEnum.INTRANSPORT)
                .visitedHops(visitedHops)
                .futureHops(futuredHops)
                .build();

        //DTO generated by ParcelMapper
        TrackingInformation trackingInformation = parcelMapper.toTrackingInfoDto(parcelEntity);

        assertEquals(trackingInformation.getState(), parcelEntity.getDeliveryStatus());
        assertEquals(trackingInformation.getFutureHops(), hopArrivals);
        assertEquals(trackingInformation.getVisitedHops(), hopArrivals);
    }
}