package at.fhtw.swen3.services.mapper;

import at.fhtw.swen3.persistence.entity.HopArrivalEntity;
import at.fhtw.swen3.persistence.entity.ParcelEntity;
import at.fhtw.swen3.persistence.entity.RecipientEntity;
import at.fhtw.swen3.services.dto.HopArrival;
import at.fhtw.swen3.services.dto.NewParcelInfoDto;
import at.fhtw.swen3.services.dto.ParcelDto;
import at.fhtw.swen3.services.dto.TrackingInformationDto;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

class ParcelMapperTest {

    ParcelMapperImpl parcelMapper = new ParcelMapperImpl();
    private @Mock HopArrivalEntity hopArrival;
    private final List<HopArrivalEntity> visitedHops = Arrays.asList(hopArrival, hopArrival, hopArrival);
    private final List<HopArrivalEntity> futuredHops = Arrays.asList(hopArrival, hopArrival, hopArrival);

    //for Test "toTrackingInfoDto", because visitedHops and futureHops are List of HopArrivals after mapping (not List of HopArrivalEntity)
    private @Mock HopArrival hopArrivalafterMapping;
    private final List<HopArrival> hopArrivals = Arrays.asList(hopArrivalafterMapping, hopArrivalafterMapping, hopArrivalafterMapping);

    protected void setUp() throws Exception {
    }

    @Test
    void from() {

        ParcelDto parcelDto = ParcelDto.builder()
                .weight(0.3f)
                .build();
        NewParcelInfoDto newParcelInfoDto = NewParcelInfoDto.builder()
                .trackingId("PYJRB4HZ6")
                .build();
        TrackingInformationDto trackingInformationDto = TrackingInformationDto.builder()
                .state(TrackingInformationDto.StateEnum.DELIVERED)
                .build();

        ParcelEntity mappedEntity = parcelMapper.from(parcelDto, newParcelInfoDto, trackingInformationDto);
        assertEquals(mappedEntity.getWeight(), parcelDto.getWeight());
        assertEquals(mappedEntity.getTrackingId(), newParcelInfoDto.getTrackingId());
        assertEquals(mappedEntity.getDeliveryStatus(), trackingInformationDto.getState());
    }

    @Test
    void toParcelDto() {
        ParcelEntity parcelEntity = ParcelEntity.builder()
                .weight(0.6f)
                .recipient(RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
                .sender(RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
                .trackingId("PYJRB4HZ6")
                .deliveryStatus(TrackingInformationDto.StateEnum.INTRANSPORT)
                .visitedHops(visitedHops)
                .futureHops(futuredHops)
                .build();

        //DTO generated by ParcelMapper
        ParcelDto mappedParcelDto = parcelMapper.toParcelDto(parcelEntity);

        assertEquals(mappedParcelDto.getWeight(), parcelEntity.getWeight());
        assertEquals(mappedParcelDto.getRecipient().getCity(), parcelEntity.getRecipient().getCity());
        assertEquals(mappedParcelDto.getSender().getStreet(), parcelEntity.getSender().getStreet());
    }

    @Test
    void toParcelInfoDto() {
        ParcelEntity parcelEntity = ParcelEntity.builder()
                .weight(0.6f)
                .recipient(RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
                .sender(RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
                .trackingId("PYJRB4HZ6")
                .deliveryStatus(TrackingInformationDto.StateEnum.INTRANSPORT)
                .visitedHops(visitedHops)
                .futureHops(futuredHops)
                .build();

        //DTO generated by ParcelMapper
        NewParcelInfoDto mappedParcelInfoDto = parcelMapper.toParcelInfoDto(parcelEntity);

        assertEquals(mappedParcelInfoDto.getTrackingId(), parcelEntity.getTrackingId());
    }

    @Test
    void toTrackingInfoDto() {
        ParcelEntity parcelEntity = ParcelEntity.builder()
                .weight(0.6f)
                .recipient(RecipientEntity.builder().name("recipientname").street("Landstraße 27a").postalCode("A-3500").city("Krems an der Donau").country("Austria").build())
                .sender(RecipientEntity.builder().name("sendername").street("Engerthstraße 228/6").postalCode("A-1020").city("Wien").country("Austria").build())
                .trackingId("PYJRB4HZ6")
                .deliveryStatus(TrackingInformationDto.StateEnum.INTRANSPORT)
                .visitedHops(visitedHops)
                .futureHops(futuredHops)
                .build();

        //DTO generated by ParcelMapper
        TrackingInformationDto trackingInformationDto = parcelMapper.toTrackingInfoDto(parcelEntity);

        assertEquals(trackingInformationDto.getState(), parcelEntity.getDeliveryStatus());
        assertEquals(trackingInformationDto.getFutureHops(), hopArrivals);
        assertEquals(trackingInformationDto.getVisitedHops(), hopArrivals);
    }
}